
/*
 * This code was generated by Spiral 8.3.0, www.spiral.net
 */

#include "hip/hip_runtime.h"
#include "common.h"
__device__ double  *P1, *P2;
 __device__ double D3[512] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 0.0, (-1.0), 
      0.92387953251128674, (-0.38268343236508978), (-0.38268343236508978), (-0.92387953251128674), 
      0.70710678118654757, (-0.70710678118654757), (-0.70710678118654757), (-0.70710678118654757), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), (-0.38268343236508978), 
      1.0, 0.0, 0.99518472667219693, (-0.098017140329560604), 
      0.99969881869620425, (-0.024541228522912288), 0.99247953459870997, (-0.1224106751992162), 
      0.99879545620517241, (-0.049067674327418015), 0.98917650996478101, (-0.14673047445536175), 
      0.99729045667869021, (-0.073564563599667426), 0.98527764238894122, (-0.17096188876030122), 
      1.0, 0.0, (-0.098017140329560604), (-0.99518472667219693), 
      0.91420975570353069, (-0.40524131400498986), (-0.49289819222978404), (-0.87008699110871146), 
      0.67155895484701833, (-0.74095112535495922), (-0.80320753148064494), (-0.59569930449243336), 
      0.31368174039889152, (-0.94952818059303667), (-0.97570213003852857), (-0.2191012401568698), 
      1.0, 0.0, 0.98078528040323043, (-0.19509032201612825), 
      0.99879545620517241, (-0.049067674327418015), 0.97003125319454397, (-0.24298017990326387), 
      0.99518472667219693, (-0.098017140329560604), 0.95694033573220882, (-0.29028467725446233), 
      0.98917650996478101, (-0.14673047445536175), 0.94154406518302081, (-0.33688985339222005), 
      1.0, 0.0, (-0.19509032201612825), (-0.98078528040323043), 
      0.90398929312344334, (-0.42755509343028208), (-0.59569930449243336), (-0.80320753148064494), 
      0.63439328416364549, (-0.77301045336273699), (-0.88192126434835505), (-0.47139673682599764), 
      0.24298017990326387, (-0.97003125319454397), (-0.99879545620517241), (-0.049067674327418015), 
      1.0, 0.0, 0.95694033573220882, (-0.29028467725446233), 
      0.99729045667869021, (-0.073564563599667426), 0.93299279883473896, (-0.35989503653498811), 
      0.98917650996478101, (-0.14673047445536175), 0.90398929312344334, (-0.42755509343028208), 
      0.97570213003852857, (-0.2191012401568698), 0.87008699110871146, (-0.49289819222978404), 
      1.0, 0.0, (-0.29028467725446233), (-0.95694033573220882), 
      0.89322430119551532, (-0.44961132965460654), (-0.68954054473706683), (-0.724247082951467), 
      0.59569930449243336, (-0.80320753148064494), (-0.94154406518302081), (-0.33688985339222005), 
      0.17096188876030122, (-0.98527764238894122), (-0.99247953459870997), 0.1224106751992162, 
      1.0, 0.0, 0.92387953251128674, (-0.38268343236508978), 
      0.99518472667219693, (-0.098017140329560604), 0.88192126434835505, (-0.47139673682599764), 
      0.98078528040323043, (-0.19509032201612825), 0.83146961230254524, (-0.55557023301960218), 
      0.95694033573220882, (-0.29028467725446233), 0.77301045336273699, (-0.63439328416364549), 
      1.0, 0.0, (-0.38268343236508978), (-0.92387953251128674), 
      0.88192126434835505, (-0.47139673682599764), (-0.77301045336273699), (-0.63439328416364549), 
      0.55557023301960218, (-0.83146961230254524), (-0.98078528040323043), (-0.19509032201612825), 
      0.098017140329560604, (-0.99518472667219693), (-0.95694033573220882), 0.29028467725446233, 
      1.0, 0.0, 0.88192126434835505, (-0.47139673682599764), 
      0.99247953459870997, (-0.1224106751992162), 0.81758481315158371, (-0.57580819141784534), 
      0.97003125319454397, (-0.24298017990326387), 0.74095112535495922, (-0.67155895484701833), 
      0.93299279883473896, (-0.35989503653498811), 0.65317284295377676, (-0.75720884650648457), 
      1.0, 0.0, (-0.47139673682599764), (-0.88192126434835505), 
      0.87008699110871146, (-0.49289819222978404), (-0.84485356524970712), (-0.53499761988709715), 
      0.51410274419322166, (-0.85772861000027212), (-0.99879545620517241), (-0.049067674327418015), 
      0.024541228522912288, (-0.99969881869620425), (-0.89322430119551532), 0.44961132965460654, 
      1.0, 0.0, 0.83146961230254524, (-0.55557023301960218), 
      0.98917650996478101, (-0.14673047445536175), 0.74095112535495922, (-0.67155895484701833), 
      0.95694033573220882, (-0.29028467725446233), 0.63439328416364549, (-0.77301045336273699), 
      0.90398929312344334, (-0.42755509343028208), 0.51410274419322166, (-0.85772861000027212), 
      1.0, 0.0, (-0.55557023301960218), (-0.83146961230254524), 
      0.85772861000027212, (-0.51410274419322166), (-0.90398929312344334), (-0.42755509343028208), 
      0.47139673682599764, (-0.88192126434835505), (-0.99518472667219693), 0.098017140329560604, 
      (-0.049067674327418015), (-0.99879545620517241), (-0.80320753148064494), 0.59569930449243336, 
      1.0, 0.0, 0.77301045336273699, (-0.63439328416364549), 
      0.98527764238894122, (-0.17096188876030122), 0.65317284295377676, (-0.75720884650648457), 
      0.94154406518302081, (-0.33688985339222005), 0.51410274419322166, (-0.85772861000027212), 
      0.87008699110871146, (-0.49289819222978404), 0.35989503653498811, (-0.93299279883473896), 
      1.0, 0.0, (-0.63439328416364549), (-0.77301045336273699), 
      0.84485356524970712, (-0.53499761988709715), (-0.94952818059303667), (-0.31368174039889152), 
      0.42755509343028208, (-0.90398929312344334), (-0.97003125319454397), 0.24298017990326387, 
      (-0.1224106751992162), (-0.99247953459870997), (-0.68954054473706683), 0.724247082951467, 
      1.0, 0.0, 0.70710678118654757, (-0.70710678118654757), 
      0.98078528040323043, (-0.19509032201612825), 0.55557023301960218, (-0.83146961230254524), 
      0.92387953251128674, (-0.38268343236508978), 0.38268343236508978, (-0.92387953251128674), 
      0.83146961230254524, (-0.55557023301960218), 0.19509032201612825, (-0.98078528040323043), 
      1.0, 0.0, (-0.70710678118654757), (-0.70710678118654757), 
      0.83146961230254524, (-0.55557023301960218), (-0.98078528040323043), (-0.19509032201612825), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), 0.38268343236508978, 
      (-0.19509032201612825), (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524, 
      1.0, 0.0, 0.63439328416364549, (-0.77301045336273699), 
      0.97570213003852857, (-0.2191012401568698), 0.44961132965460654, (-0.89322430119551532), 
      0.90398929312344334, (-0.42755509343028208), 0.24298017990326387, (-0.97003125319454397), 
      0.78834642762660623, (-0.61523159058062682), 0.024541228522912288, (-0.99969881869620425), 
      1.0, 0.0, (-0.77301045336273699), (-0.63439328416364549), 
      0.81758481315158371, (-0.57580819141784534), (-0.99729045667869021), (-0.073564563599667426), 
      0.33688985339222005, (-0.94154406518302081), (-0.85772861000027212), 0.51410274419322166, 
      (-0.26671275747489837), (-0.96377606579543984), (-0.40524131400498986), 0.91420975570353069, 
      1.0, 0.0, 0.55557023301960218, (-0.83146961230254524), 
      0.97003125319454397, (-0.24298017990326387), 0.33688985339222005, (-0.94154406518302081), 
      0.88192126434835505, (-0.47139673682599764), 0.098017140329560604, (-0.99518472667219693), 
      0.74095112535495922, (-0.67155895484701833), (-0.14673047445536175), (-0.98917650996478101), 
      1.0, 0.0, (-0.83146961230254524), (-0.55557023301960218), 
      0.80320753148064494, (-0.59569930449243336), (-0.99879545620517241), 0.049067674327418015, 
      0.29028467725446233, (-0.95694033573220882), (-0.77301045336273699), 0.63439328416364549, 
      (-0.33688985339222005), (-0.94154406518302081), (-0.24298017990326387), 0.97003125319454397, 
      1.0, 0.0, 0.47139673682599764, (-0.88192126434835505), 
      0.96377606579543984, (-0.26671275747489837), 0.2191012401568698, (-0.97570213003852857), 
      0.85772861000027212, (-0.51410274419322166), (-0.049067674327418015), (-0.99879545620517241), 
      0.68954054473706683, (-0.724247082951467), (-0.31368174039889152), (-0.94952818059303667), 
      1.0, 0.0, (-0.88192126434835505), (-0.47139673682599764), 
      0.78834642762660623, (-0.61523159058062682), (-0.98527764238894122), 0.17096188876030122, 
      0.24298017990326387, (-0.97003125319454397), (-0.67155895484701833), 0.74095112535495922, 
      (-0.40524131400498986), (-0.91420975570353069), (-0.073564563599667426), 0.99729045667869021, 
      1.0, 0.0, 0.38268343236508978, (-0.92387953251128674), 
      0.95694033573220882, (-0.29028467725446233), 0.098017140329560604, (-0.99518472667219693), 
      0.83146961230254524, (-0.55557023301960218), (-0.19509032201612825), (-0.98078528040323043), 
      0.63439328416364549, (-0.77301045336273699), (-0.47139673682599764), (-0.88192126434835505), 
      1.0, 0.0, (-0.92387953251128674), (-0.38268343236508978), 
      0.77301045336273699, (-0.63439328416364549), (-0.95694033573220882), 0.29028467725446233, 
      0.19509032201612825, (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524, 
      (-0.47139673682599764), (-0.88192126434835505), 0.098017140329560604, 0.99518472667219693, 
      1.0, 0.0, 0.29028467725446233, (-0.95694033573220882), 
      0.94952818059303667, (-0.31368174039889152), (-0.024541228522912288), (-0.99969881869620425), 
      0.80320753148064494, (-0.59569930449243336), (-0.33688985339222005), (-0.94154406518302081), 
      0.57580819141784534, (-0.81758481315158371), (-0.61523159058062682), (-0.78834642762660623), 
      1.0, 0.0, (-0.95694033573220882), (-0.29028467725446233), 
      0.75720884650648457, (-0.65317284295377676), (-0.91420975570353069), 0.40524131400498986, 
      0.14673047445536175, (-0.98917650996478101), (-0.42755509343028208), 0.90398929312344334, 
      (-0.53499761988709715), (-0.84485356524970712), 0.26671275747489837, 0.96377606579543984, 
      1.0, 0.0, 0.19509032201612825, (-0.98078528040323043), 
      0.94154406518302081, (-0.33688985339222005), (-0.14673047445536175), (-0.98917650996478101), 
      0.77301045336273699, (-0.63439328416364549), (-0.47139673682599764), (-0.88192126434835505), 
      0.51410274419322166, (-0.85772861000027212), (-0.74095112535495922), (-0.67155895484701833), 
      1.0, 0.0, (-0.98078528040323043), (-0.19509032201612825), 
      0.74095112535495922, (-0.67155895484701833), (-0.85772861000027212), 0.51410274419322166, 
      0.098017140329560604, (-0.99518472667219693), (-0.29028467725446233), 0.95694033573220882, 
      (-0.59569930449243336), (-0.80320753148064494), 0.42755509343028208, 0.90398929312344334, 
      1.0, 0.0, 0.098017140329560604, (-0.99518472667219693), 
      0.93299279883473896, (-0.35989503653498811), (-0.26671275747489837), (-0.96377606579543984), 
      0.74095112535495922, (-0.67155895484701833), (-0.59569930449243336), (-0.80320753148064494), 
      0.44961132965460654, (-0.89322430119551532), (-0.84485356524970712), (-0.53499761988709715), 
      1.0, 0.0, (-0.99518472667219693), (-0.098017140329560604), 
      0.724247082951467, (-0.68954054473706683), (-0.78834642762660623), 0.61523159058062682, 
      0.049067674327418015, (-0.99879545620517241), (-0.14673047445536175), 0.98917650996478101, 
      (-0.65317284295377676), (-0.75720884650648457), 0.57580819141784534, 0.81758481315158371};

 __device__ double D4[64] = {1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 1.0, 0.0, 
      1.0, 0.0, 0.0, (-1.0), 
      0.92387953251128674, (-0.38268343236508978), (-0.38268343236508978), (-0.92387953251128674), 
      0.70710678118654757, (-0.70710678118654757), (-0.70710678118654757), (-0.70710678118654757), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), (-0.38268343236508978), 
      1.0, 0.0, 0.70710678118654757, (-0.70710678118654757), 
      0.98078528040323043, (-0.19509032201612825), 0.55557023301960218, (-0.83146961230254524), 
      0.92387953251128674, (-0.38268343236508978), 0.38268343236508978, (-0.92387953251128674), 
      0.83146961230254524, (-0.55557023301960218), 0.19509032201612825, (-0.98078528040323043), 
      1.0, 0.0, (-0.70710678118654757), (-0.70710678118654757), 
      0.83146961230254524, (-0.55557023301960218), (-0.98078528040323043), (-0.19509032201612825), 
      0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), 0.38268343236508978, 
      (-0.19509032201612825), (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524};

#if 0
__global__ void ker_fftx_mddft_256x256x256_HIP0(double  *X) {
    double R1, R10, R11, R12, R13, R14, R15, R16, 
            R17, R18, R19, R2, R20, R21, R22, R23, 
            R24, R25, R26, R27, R28, R29, R3, R30, 
            R31, R32, R33, R34, R35, R36, R37, R38, 
            R39, R4, R40, R41, R42, R43, R44, R45, 
            R46, R47, R48, R49, R5, R50, R51, R52, 
            R53, R54, R55, R56, R57, R58, R59, R6, 
            R60, R61, R62, R63, R64, R65, R66, R67, 
            R68, R69, R7, R70, R71, R72, R73, R74, 
            R75, R76, R77, R78, R79, R8, R80, R81, 
            R82, R83, R84, R9;
    __shared__ double T3[8192];
    int a757, a758, a759, a760, a761, a762;
    a757 = (threadIdx.x % 16);
    a758 = (a757 % 2);
    a759 = (a757 / 2);
    a760 = (threadIdx.x / 16);
    a761 = ((1024*blockIdx.x) + (32*blockIdx.y) + (16384*blockIdx.z) + (4194304*a758) + (131072*a759) + (2*a760));
    R30 = X[a761];
    R31 = X[(a761 + 1)];
    R32 = X[(a761 + 16777216)];
    R1 = X[(a761 + 16777217)];
    R33 = (R30 + R32);
    R34 = (R31 + R1);
    R35 = (R30 - R32);
    R36 = (R31 - R1);
    R2 = X[(a761 + 8388608)];
    R3 = X[(a761 + 8388609)];
    R4 = X[(a761 + 25165824)];
    R5 = X[(a761 + 25165825)];
    R37 = (R2 + R4);
    R38 = (R3 + R5);
    R39 = (R2 - R4);
    R40 = (R3 - R5);
    a762 = ((512*a760) + (64*a759) + (32*a758));
    T3[a762] = (R33 + R37);
    T3[(a762 + 1)] = (R34 + R38);
    T3[(a762 + 4)] = (R33 - R37);
    T3[(a762 + 5)] = (R34 - R38);
    T3[(a762 + 2)] = (R35 + R40);
    T3[(a762 + 3)] = (R36 - R39);
    T3[(a762 + 6)] = (R35 - R40);
    T3[(a762 + 7)] = (R36 + R39);
    R6 = X[(a761 + 1048576)];
    R7 = X[(a761 + 1048577)];
    R8 = X[(a761 + 17825792)];
    R9 = X[(a761 + 17825793)];
    R41 = (R6 + R8);
    R42 = (R7 + R9);
    R43 = (R6 - R8);
    R44 = (R7 - R9);
    R10 = X[(a761 + 9437184)];
    R11 = X[(a761 + 9437185)];
    R12 = X[(a761 + 26214400)];
    R13 = X[(a761 + 26214401)];
    R45 = (R10 + R12);
    R46 = (R11 + R13);
    R47 = (R10 - R12);
    R48 = (R11 - R13);
    T3[(a762 + 8)] = (R41 + R45);
    T3[(a762 + 9)] = (R42 + R46);
    T3[(a762 + 12)] = (R41 - R45);
    T3[(a762 + 13)] = (R42 - R46);
    T3[(a762 + 10)] = (R43 + R48);
    T3[(a762 + 11)] = (R44 - R47);
    T3[(a762 + 14)] = (R43 - R48);
    T3[(a762 + 15)] = (R44 + R47);
    R14 = X[(a761 + 2097152)];
    R15 = X[(a761 + 2097153)];
    R16 = X[(a761 + 18874368)];
    R17 = X[(a761 + 18874369)];
    R49 = (R14 + R16);
    R50 = (R15 + R17);
    R51 = (R14 - R16);
    R52 = (R15 - R17);
    R18 = X[(a761 + 10485760)];
    R19 = X[(a761 + 10485761)];
    R20 = X[(a761 + 27262976)];
    R21 = X[(a761 + 27262977)];
    R53 = (R18 + R20);
    R54 = (R19 + R21);
    R55 = (R18 - R20);
    R56 = (R19 - R21);
    T3[(a762 + 16)] = (R49 + R53);
    T3[(a762 + 17)] = (R50 + R54);
    T3[(a762 + 20)] = (R49 - R53);
    T3[(a762 + 21)] = (R50 - R54);
    T3[(a762 + 18)] = (R51 + R56);
    T3[(a762 + 19)] = (R52 - R55);
    T3[(a762 + 22)] = (R51 - R56);
    T3[(a762 + 23)] = (R52 + R55);
    R22 = X[(a761 + 3145728)];
    R23 = X[(a761 + 3145729)];
    R24 = X[(a761 + 19922944)];
    R25 = X[(a761 + 19922945)];
    R57 = (R22 + R24);
    R58 = (R23 + R25);
    R59 = (R22 - R24);
    R60 = (R23 - R25);
    R26 = X[(a761 + 11534336)];
    R27 = X[(a761 + 11534337)];
    R28 = X[(a761 + 28311552)];
    R29 = X[(a761 + 28311553)];
    R61 = (R26 + R28);
    R62 = (R27 + R29);
    R63 = (R26 - R28);
    R64 = (R27 - R29);
    T3[(a762 + 24)] = (R57 + R61);
    T3[(a762 + 25)] = (R58 + R62);
    T3[(a762 + 28)] = (R57 - R61);
    T3[(a762 + 29)] = (R58 - R62);
    T3[(a762 + 26)] = (R59 + R64);
    T3[(a762 + 27)] = (R60 - R63);
    T3[(a762 + 30)] = (R59 - R64);
    T3[(a762 + 31)] = (R60 + R63);
    __syncthreads();
    for(int i82 = 0; i82 <= 1; i82++) {
        int a1449, a1450, a1451, a1452, a1453, a1454, a1455, a1456, 
                a1461, a1462, a1463, a1464, a1471, a1472, a1473, a1474, 
                a1479, a1480, a1481, a1482, b356;
        a1449 = (threadIdx.x % 16);
        a1450 = (a1449 % 2);
        a1451 = ((512*(threadIdx.x / 16)) + (64*(a1449 / 2)) + (2*a1450) + (4*i82));
        R21 = T3[a1451];
        a1452 = (a1451 + 1);
        R22 = T3[a1452];
        a1453 = (a1451 + 32);
        R23 = T3[a1453];
        a1454 = (a1451 + 33);
        R24 = T3[a1454];
        a1455 = (16*i82);
        a1456 = (32*a1450);
        R1 = D4[(a1455 + a1456)];
        b356 = (a1456 + a1455);
        R2 = D4[(b356 + 1)];
        R25 = ((R1*R21) - (R2*R22));
        R26 = ((R2*R21) + (R1*R22));
        R3 = D4[(b356 + 2)];
        R4 = D4[(b356 + 3)];
        R27 = ((R3*R23) - (R4*R24));
        R28 = ((R4*R23) + (R3*R24));
        R57 = (R25 + R27);
        R58 = (R26 + R28);
        R59 = (R25 - R27);
        R60 = (R26 - R28);
        a1461 = (a1451 + 8);
        R29 = T3[a1461];
        a1462 = (a1451 + 9);
        R30 = T3[a1462];
        a1463 = (a1451 + 40);
        R31 = T3[a1463];
        a1464 = (a1451 + 41);
        R32 = T3[a1464];
        R5 = D4[(b356 + 4)];
        R6 = D4[(b356 + 5)];
        R33 = ((R5*R29) - (R6*R30));
        R34 = ((R6*R29) + (R5*R30));
        R7 = D4[(b356 + 6)];
        R8 = D4[(b356 + 7)];
        R35 = ((R7*R31) - (R8*R32));
        R36 = ((R8*R31) + (R7*R32));
        R61 = (R33 + R35);
        R62 = (R34 + R36);
        R9 = (0.70710678118654757*(R33 - R35));
        R10 = (0.70710678118654757*(R34 - R36));
        R37 = (R9 + R10);
        R38 = (R10 - R9);
        a1471 = (a1451 + 16);
        R39 = T3[a1471];
        a1472 = (a1451 + 17);
        R40 = T3[a1472];
        a1473 = (a1451 + 48);
        R41 = T3[a1473];
        a1474 = (a1451 + 49);
        R42 = T3[a1474];
        R11 = D4[(b356 + 8)];
        R12 = D4[(b356 + 9)];
        R43 = ((R11*R39) - (R12*R40));
        R44 = ((R12*R39) + (R11*R40));
        R13 = D4[(b356 + 10)];
        R14 = D4[(b356 + 11)];
        R45 = ((R13*R41) - (R14*R42));
        R46 = ((R14*R41) + (R13*R42));
        R63 = (R43 + R45);
        R64 = (R44 + R46);
        R65 = (R43 - R45);
        R66 = (R44 - R46);
        a1479 = (a1451 + 24);
        R47 = T3[a1479];
        a1480 = (a1451 + 25);
        R48 = T3[a1480];
        a1481 = (a1451 + 56);
        R49 = T3[a1481];
        a1482 = (a1451 + 57);
        R50 = T3[a1482];
        R15 = D4[(b356 + 12)];
        R16 = D4[(b356 + 13)];
        R51 = ((R15*R47) - (R16*R48));
        R52 = ((R16*R47) + (R15*R48));
        R17 = D4[(b356 + 14)];
        R18 = D4[(b356 + 15)];
        R53 = ((R17*R49) - (R18*R50));
        R54 = ((R18*R49) + (R17*R50));
        R67 = (R51 + R53);
        R68 = (R52 + R54);
        R19 = (0.70710678118654757*(R52 - R54));
        R20 = (0.70710678118654757*(R51 - R53));
        R55 = (R19 - R20);
        R56 = (R20 + R19);
        R69 = (R57 + R63);
        R70 = (R58 + R64);
        R71 = (R57 - R63);
        R72 = (R58 - R64);
        R73 = (R61 + R67);
        R74 = (R62 + R68);
        R75 = (R61 - R67);
        R76 = (R62 - R68);
        T3[a1451] = (R69 + R73);
        T3[a1452] = (R70 + R74);
        T3[a1453] = (R69 - R73);
        T3[a1454] = (R70 - R74);
        T3[a1471] = (R71 + R76);
        T3[a1472] = (R72 - R75);
        T3[a1473] = (R71 - R76);
        T3[a1474] = (R72 + R75);
        R77 = (R59 + R66);
        R78 = (R60 - R65);
        R79 = (R59 - R66);
        R80 = (R60 + R65);
        R81 = (R37 + R55);
        R82 = (R38 - R56);
        R83 = (R37 - R55);
        R84 = (R38 + R56);
        T3[a1461] = (R77 + R81);
        T3[a1462] = (R78 + R82);
        T3[a1463] = (R77 - R81);
        T3[a1464] = (R78 - R82);
        T3[a1479] = (R79 + R84);
        T3[a1480] = (R80 - R83);
        T3[a1481] = (R79 - R84);
        T3[a1482] = (R80 + R83);
    }
    __syncthreads();
    for(int i24 = 0; i24 <= 1; i24++) {
        int a2067, a2068, a2069, a2070, a2071, a2072, a2073, a2094, 
                b505;
        a2067 = (32*i24);
        a2068 = (512*(threadIdx.x / 16));
        a2069 = (threadIdx.x % 16);
        a2070 = (2*a2069);
        a2071 = (a2068 + a2070 + a2067);
        R21 = T3[a2071];
        R22 = T3[(a2071 + 1)];
        R23 = T3[(a2071 + 256)];
        R24 = T3[(a2071 + 257)];
        a2072 = (16*i24);
        a2073 = (32*a2069);
        R1 = D3[(a2072 + a2073)];
        b505 = (a2073 + a2072);
        R2 = D3[(b505 + 1)];
        R25 = ((R1*R21) - (R2*R22));
        R26 = ((R2*R21) + (R1*R22));
        R3 = D3[(b505 + 2)];
        R4 = D3[(b505 + 3)];
        R27 = ((R3*R23) - (R4*R24));
        R28 = ((R4*R23) + (R3*R24));
        R57 = (R25 + R27);
        R58 = (R26 + R28);
        R59 = (R25 - R27);
        R60 = (R26 - R28);
        R29 = T3[(a2071 + 64)];
        R30 = T3[(a2071 + 65)];
        R31 = T3[(a2071 + 320)];
        R32 = T3[(a2071 + 321)];
        R5 = D3[(b505 + 4)];
        R6 = D3[(b505 + 5)];
        R33 = ((R5*R29) - (R6*R30));
        R34 = ((R6*R29) + (R5*R30));
        R7 = D3[(b505 + 6)];
        R8 = D3[(b505 + 7)];
        R35 = ((R7*R31) - (R8*R32));
        R36 = ((R8*R31) + (R7*R32));
        R61 = (R33 + R35);
        R62 = (R34 + R36);
        R9 = (0.70710678118654757*(R33 - R35));
        R10 = (0.70710678118654757*(R34 - R36));
        R37 = (R9 + R10);
        R38 = (R10 - R9);
        R39 = T3[(a2071 + 128)];
        R40 = T3[(a2071 + 129)];
        R41 = T3[(a2071 + 384)];
        R42 = T3[(a2071 + 385)];
        R11 = D3[(b505 + 8)];
        R12 = D3[(b505 + 9)];
        R43 = ((R11*R39) - (R12*R40));
        R44 = ((R12*R39) + (R11*R40));
        R13 = D3[(b505 + 10)];
        R14 = D3[(b505 + 11)];
        R45 = ((R13*R41) - (R14*R42));
        R46 = ((R14*R41) + (R13*R42));
        R63 = (R43 + R45);
        R64 = (R44 + R46);
        R65 = (R43 - R45);
        R66 = (R44 - R46);
        R47 = T3[(a2071 + 192)];
        R48 = T3[(a2071 + 193)];
        R49 = T3[(a2071 + 448)];
        R50 = T3[(a2071 + 449)];
        R15 = D3[(b505 + 12)];
        R16 = D3[(b505 + 13)];
        R51 = ((R15*R47) - (R16*R48));
        R52 = ((R16*R47) + (R15*R48));
        R17 = D3[(b505 + 14)];
        R18 = D3[(b505 + 15)];
        R53 = ((R17*R49) - (R18*R50));
        R54 = ((R18*R49) + (R17*R50));
        R67 = (R51 + R53);
        R68 = (R52 + R54);
        R19 = (0.70710678118654757*(R52 - R54));
        R20 = (0.70710678118654757*(R51 - R53));
        R55 = (R19 - R20);
        R56 = (R20 + R19);
        R69 = (R57 + R63);
        R70 = (R58 + R64);
        R71 = (R57 - R63);
        R72 = (R58 - R64);
        R73 = (R61 + R67);
        R74 = (R62 + R68);
        R75 = (R61 - R67);
        R76 = (R62 - R68);
        a2094 = ((262144*blockIdx.x) + (8192*blockIdx.y) + (4194304*blockIdx.z) + a2068 + a2070 + a2067);
        P1[a2094] = (R69 + R73);
        P1[(a2094 + 1)] = (R70 + R74);
        P1[(a2094 + 256)] = (R69 - R73);
        P1[(a2094 + 257)] = (R70 - R74);
        P1[(a2094 + 128)] = (R71 + R76);
        P1[(a2094 + 129)] = (R72 - R75);
        P1[(a2094 + 384)] = (R71 - R76);
        P1[(a2094 + 385)] = (R72 + R75);
        R77 = (R59 + R66);
        R78 = (R60 - R65);
        R79 = (R59 - R66);
        R80 = (R60 + R65);
        R81 = (R37 + R55);
        R82 = (R38 - R56);
        R83 = (R37 - R55);
        R84 = (R38 + R56);
        P1[(a2094 + 64)] = (R77 + R81);
        P1[(a2094 + 65)] = (R78 + R82);
        P1[(a2094 + 320)] = (R77 - R81);
        P1[(a2094 + 321)] = (R78 - R82);
        P1[(a2094 + 192)] = (R79 + R84);
        P1[(a2094 + 193)] = (R80 - R83);
        P1[(a2094 + 448)] = (R79 - R84);
        P1[(a2094 + 449)] = (R80 + R83);
    }
    __syncthreads();
}

__global__ void ker_fftx_mddft_256x256x256_HIP1() {
    double R100, R101, R102, R103, R104, R105, R106, R107, 
            R108, R109, R110, R111, R112, R113, R114, R115, 
            R116, R117, R118, R119, R120, R121, R122, R123, 
            R124, R125, R126, R127, R128, R129, R130, R131, 
            R132, R133, R134, R135, R136, R137, R138, R139, 
            R140, R141, R142, R143, R144, R145, R146, R147, 
            R148, R149, R150, R151, R152, R153, R154, R155, 
            R156, R157, R158, R159, R160, R161, R162, R163, 
            R164, R165, R166, R167, R168, R85, R86, R87, 
            R88, R89, R90, R91, R92, R93, R94, R95, 
            R96, R97, R98, R99;
    __shared__ double T32[8192];
    int a2850, a2851, a2852, a2853, a2854, a2855;
    a2850 = (threadIdx.x % 16);
    a2851 = (a2850 % 2);
    a2852 = (a2850 / 2);
    a2853 = (threadIdx.x / 16);
    a2854 = ((1024*blockIdx.x) + (32*blockIdx.y) + (16384*blockIdx.z) + (4194304*a2851) + (131072*a2852) + (2*a2853));
    R85 = P1[a2854];
    R86 = P1[(a2854 + 1)];
    R87 = P1[(a2854 + 16777216)];
    R88 = P1[(a2854 + 16777217)];
    R117 = (R85 + R87);
    R118 = (R86 + R88);
    R119 = (R85 - R87);
    R120 = (R86 - R88);
    R89 = P1[(a2854 + 8388608)];
    R90 = P1[(a2854 + 8388609)];
    R91 = P1[(a2854 + 25165824)];
    R92 = P1[(a2854 + 25165825)];
    R121 = (R89 + R91);
    R122 = (R90 + R92);
    R123 = (R89 - R91);
    R124 = (R90 - R92);
    a2855 = ((512*a2853) + (64*a2852) + (32*a2851));
    T32[a2855] = (R117 + R121);
    T32[(a2855 + 1)] = (R118 + R122);
    T32[(a2855 + 4)] = (R117 - R121);
    T32[(a2855 + 5)] = (R118 - R122);
    T32[(a2855 + 2)] = (R119 + R124);
    T32[(a2855 + 3)] = (R120 - R123);
    T32[(a2855 + 6)] = (R119 - R124);
    T32[(a2855 + 7)] = (R120 + R123);
    R93 = P1[(a2854 + 1048576)];
    R94 = P1[(a2854 + 1048577)];
    R95 = P1[(a2854 + 17825792)];
    R96 = P1[(a2854 + 17825793)];
    R125 = (R93 + R95);
    R126 = (R94 + R96);
    R127 = (R93 - R95);
    R128 = (R94 - R96);
    R97 = P1[(a2854 + 9437184)];
    R98 = P1[(a2854 + 9437185)];
    R99 = P1[(a2854 + 26214400)];
    R100 = P1[(a2854 + 26214401)];
    R129 = (R97 + R99);
    R130 = (R98 + R100);
    R131 = (R97 - R99);
    R132 = (R98 - R100);
    T32[(a2855 + 8)] = (R125 + R129);
    T32[(a2855 + 9)] = (R126 + R130);
    T32[(a2855 + 12)] = (R125 - R129);
    T32[(a2855 + 13)] = (R126 - R130);
    T32[(a2855 + 10)] = (R127 + R132);
    T32[(a2855 + 11)] = (R128 - R131);
    T32[(a2855 + 14)] = (R127 - R132);
    T32[(a2855 + 15)] = (R128 + R131);
    R101 = P1[(a2854 + 2097152)];
    R102 = P1[(a2854 + 2097153)];
    R103 = P1[(a2854 + 18874368)];
    R104 = P1[(a2854 + 18874369)];
    R133 = (R101 + R103);
    R134 = (R102 + R104);
    R135 = (R101 - R103);
    R136 = (R102 - R104);
    R105 = P1[(a2854 + 10485760)];
    R106 = P1[(a2854 + 10485761)];
    R107 = P1[(a2854 + 27262976)];
    R108 = P1[(a2854 + 27262977)];
    R137 = (R105 + R107);
    R138 = (R106 + R108);
    R139 = (R105 - R107);
    R140 = (R106 - R108);
    T32[(a2855 + 16)] = (R133 + R137);
    T32[(a2855 + 17)] = (R134 + R138);
    T32[(a2855 + 20)] = (R133 - R137);
    T32[(a2855 + 21)] = (R134 - R138);
    T32[(a2855 + 18)] = (R135 + R140);
    T32[(a2855 + 19)] = (R136 - R139);
    T32[(a2855 + 22)] = (R135 - R140);
    T32[(a2855 + 23)] = (R136 + R139);
    R109 = P1[(a2854 + 3145728)];
    R110 = P1[(a2854 + 3145729)];
    R111 = P1[(a2854 + 19922944)];
    R112 = P1[(a2854 + 19922945)];
    R141 = (R109 + R111);
    R142 = (R110 + R112);
    R143 = (R109 - R111);
    R144 = (R110 - R112);
    R113 = P1[(a2854 + 11534336)];
    R114 = P1[(a2854 + 11534337)];
    R115 = P1[(a2854 + 28311552)];
    R116 = P1[(a2854 + 28311553)];
    R145 = (R113 + R115);
    R146 = (R114 + R116);
    R147 = (R113 - R115);
    R148 = (R114 - R116);
    T32[(a2855 + 24)] = (R141 + R145);
    T32[(a2855 + 25)] = (R142 + R146);
    T32[(a2855 + 28)] = (R141 - R145);
    T32[(a2855 + 29)] = (R142 - R146);
    T32[(a2855 + 26)] = (R143 + R148);
    T32[(a2855 + 27)] = (R144 - R147);
    T32[(a2855 + 30)] = (R143 - R148);
    T32[(a2855 + 31)] = (R144 + R147);
    __syncthreads();
    for(int i74 = 0; i74 <= 1; i74++) {
        int a3542, a3543, a3544, a3545, a3546, a3547, a3548, a3549, 
                a3554, a3555, a3556, a3557, a3564, a3565, a3566, a3567, 
                a3572, a3573, a3574, a3575, b861;
        a3542 = (threadIdx.x % 16);
        a3543 = (a3542 % 2);
        a3544 = ((512*(threadIdx.x / 16)) + (64*(a3542 / 2)) + (2*a3543) + (4*i74));
        R105 = T32[a3544];
        a3545 = (a3544 + 1);
        R106 = T32[a3545];
        a3546 = (a3544 + 32);
        R107 = T32[a3546];
        a3547 = (a3544 + 33);
        R108 = T32[a3547];
        a3548 = (16*i74);
        a3549 = (32*a3543);
        R85 = D4[(a3548 + a3549)];
        b861 = (a3549 + a3548);
        R86 = D4[(b861 + 1)];
        R109 = ((R85*R105) - (R86*R106));
        R110 = ((R86*R105) + (R85*R106));
        R87 = D4[(b861 + 2)];
        R88 = D4[(b861 + 3)];
        R111 = ((R87*R107) - (R88*R108));
        R112 = ((R88*R107) + (R87*R108));
        R141 = (R109 + R111);
        R142 = (R110 + R112);
        R143 = (R109 - R111);
        R144 = (R110 - R112);
        a3554 = (a3544 + 8);
        R113 = T32[a3554];
        a3555 = (a3544 + 9);
        R114 = T32[a3555];
        a3556 = (a3544 + 40);
        R115 = T32[a3556];
        a3557 = (a3544 + 41);
        R116 = T32[a3557];
        R89 = D4[(b861 + 4)];
        R90 = D4[(b861 + 5)];
        R117 = ((R89*R113) - (R90*R114));
        R118 = ((R90*R113) + (R89*R114));
        R91 = D4[(b861 + 6)];
        R92 = D4[(b861 + 7)];
        R119 = ((R91*R115) - (R92*R116));
        R120 = ((R92*R115) + (R91*R116));
        R145 = (R117 + R119);
        R146 = (R118 + R120);
        R93 = (0.70710678118654757*(R117 - R119));
        R94 = (0.70710678118654757*(R118 - R120));
        R121 = (R93 + R94);
        R122 = (R94 - R93);
        a3564 = (a3544 + 16);
        R123 = T32[a3564];
        a3565 = (a3544 + 17);
        R124 = T32[a3565];
        a3566 = (a3544 + 48);
        R125 = T32[a3566];
        a3567 = (a3544 + 49);
        R126 = T32[a3567];
        R95 = D4[(b861 + 8)];
        R96 = D4[(b861 + 9)];
        R127 = ((R95*R123) - (R96*R124));
        R128 = ((R96*R123) + (R95*R124));
        R97 = D4[(b861 + 10)];
        R98 = D4[(b861 + 11)];
        R129 = ((R97*R125) - (R98*R126));
        R130 = ((R98*R125) + (R97*R126));
        R147 = (R127 + R129);
        R148 = (R128 + R130);
        R149 = (R127 - R129);
        R150 = (R128 - R130);
        a3572 = (a3544 + 24);
        R131 = T32[a3572];
        a3573 = (a3544 + 25);
        R132 = T32[a3573];
        a3574 = (a3544 + 56);
        R133 = T32[a3574];
        a3575 = (a3544 + 57);
        R134 = T32[a3575];
        R99 = D4[(b861 + 12)];
        R100 = D4[(b861 + 13)];
        R135 = ((R99*R131) - (R100*R132));
        R136 = ((R100*R131) + (R99*R132));
        R101 = D4[(b861 + 14)];
        R102 = D4[(b861 + 15)];
        R137 = ((R101*R133) - (R102*R134));
        R138 = ((R102*R133) + (R101*R134));
        R151 = (R135 + R137);
        R152 = (R136 + R138);
        R103 = (0.70710678118654757*(R136 - R138));
        R104 = (0.70710678118654757*(R135 - R137));
        R139 = (R103 - R104);
        R140 = (R104 + R103);
        R153 = (R141 + R147);
        R154 = (R142 + R148);
        R155 = (R141 - R147);
        R156 = (R142 - R148);
        R157 = (R145 + R151);
        R158 = (R146 + R152);
        R159 = (R145 - R151);
        R160 = (R146 - R152);
        T32[a3544] = (R153 + R157);
        T32[a3545] = (R154 + R158);
        T32[a3546] = (R153 - R157);
        T32[a3547] = (R154 - R158);
        T32[a3564] = (R155 + R160);
        T32[a3565] = (R156 - R159);
        T32[a3566] = (R155 - R160);
        T32[a3567] = (R156 + R159);
        R161 = (R143 + R150);
        R162 = (R144 - R149);
        R163 = (R143 - R150);
        R164 = (R144 + R149);
        R165 = (R121 + R139);
        R166 = (R122 - R140);
        R167 = (R121 - R139);
        R168 = (R122 + R140);
        T32[a3554] = (R161 + R165);
        T32[a3555] = (R162 + R166);
        T32[a3556] = (R161 - R165);
        T32[a3557] = (R162 - R166);
        T32[a3572] = (R163 + R168);
        T32[a3573] = (R164 - R167);
        T32[a3574] = (R163 - R168);
        T32[a3575] = (R164 + R167);
    }
    __syncthreads();
    for(int i22 = 0; i22 <= 1; i22++) {
        int a4160, a4161, a4162, a4163, a4164, a4165, a4166, a4187, 
                b1009;
        a4160 = (32*i22);
        a4161 = (512*(threadIdx.x / 16));
        a4162 = (threadIdx.x % 16);
        a4163 = (2*a4162);
        a4164 = (a4161 + a4163 + a4160);
        R105 = T32[a4164];
        R106 = T32[(a4164 + 1)];
        R107 = T32[(a4164 + 256)];
        R108 = T32[(a4164 + 257)];
        a4165 = (16*i22);
        a4166 = (32*a4162);
        R85 = D3[(a4165 + a4166)];
        b1009 = (a4166 + a4165);
        R86 = D3[(b1009 + 1)];
        R109 = ((R85*R105) - (R86*R106));
        R110 = ((R86*R105) + (R85*R106));
        R87 = D3[(b1009 + 2)];
        R88 = D3[(b1009 + 3)];
        R111 = ((R87*R107) - (R88*R108));
        R112 = ((R88*R107) + (R87*R108));
        R141 = (R109 + R111);
        R142 = (R110 + R112);
        R143 = (R109 - R111);
        R144 = (R110 - R112);
        R113 = T32[(a4164 + 64)];
        R114 = T32[(a4164 + 65)];
        R115 = T32[(a4164 + 320)];
        R116 = T32[(a4164 + 321)];
        R89 = D3[(b1009 + 4)];
        R90 = D3[(b1009 + 5)];
        R117 = ((R89*R113) - (R90*R114));
        R118 = ((R90*R113) + (R89*R114));
        R91 = D3[(b1009 + 6)];
        R92 = D3[(b1009 + 7)];
        R119 = ((R91*R115) - (R92*R116));
        R120 = ((R92*R115) + (R91*R116));
        R145 = (R117 + R119);
        R146 = (R118 + R120);
        R93 = (0.70710678118654757*(R117 - R119));
        R94 = (0.70710678118654757*(R118 - R120));
        R121 = (R93 + R94);
        R122 = (R94 - R93);
        R123 = T32[(a4164 + 128)];
        R124 = T32[(a4164 + 129)];
        R125 = T32[(a4164 + 384)];
        R126 = T32[(a4164 + 385)];
        R95 = D3[(b1009 + 8)];
        R96 = D3[(b1009 + 9)];
        R127 = ((R95*R123) - (R96*R124));
        R128 = ((R96*R123) + (R95*R124));
        R97 = D3[(b1009 + 10)];
        R98 = D3[(b1009 + 11)];
        R129 = ((R97*R125) - (R98*R126));
        R130 = ((R98*R125) + (R97*R126));
        R147 = (R127 + R129);
        R148 = (R128 + R130);
        R149 = (R127 - R129);
        R150 = (R128 - R130);
        R131 = T32[(a4164 + 192)];
        R132 = T32[(a4164 + 193)];
        R133 = T32[(a4164 + 448)];
        R134 = T32[(a4164 + 449)];
        R99 = D3[(b1009 + 12)];
        R100 = D3[(b1009 + 13)];
        R135 = ((R99*R131) - (R100*R132));
        R136 = ((R100*R131) + (R99*R132));
        R101 = D3[(b1009 + 14)];
        R102 = D3[(b1009 + 15)];
        R137 = ((R101*R133) - (R102*R134));
        R138 = ((R102*R133) + (R101*R134));
        R151 = (R135 + R137);
        R152 = (R136 + R138);
        R103 = (0.70710678118654757*(R136 - R138));
        R104 = (0.70710678118654757*(R135 - R137));
        R139 = (R103 - R104);
        R140 = (R104 + R103);
        R153 = (R141 + R147);
        R154 = (R142 + R148);
        R155 = (R141 - R147);
        R156 = (R142 - R148);
        R157 = (R145 + R151);
        R158 = (R146 + R152);
        R159 = (R145 - R151);
        R160 = (R146 - R152);
        a4187 = ((262144*blockIdx.x) + (8192*blockIdx.y) + (4194304*blockIdx.z) + a4161 + a4163 + a4160);
        P2[a4187] = (R153 + R157);
        P2[(a4187 + 1)] = (R154 + R158);
        P2[(a4187 + 256)] = (R153 - R157);
        P2[(a4187 + 257)] = (R154 - R158);
        P2[(a4187 + 128)] = (R155 + R160);
        P2[(a4187 + 129)] = (R156 - R159);
        P2[(a4187 + 384)] = (R155 - R160);
        P2[(a4187 + 385)] = (R156 + R159);
        R161 = (R143 + R150);
        R162 = (R144 - R149);
        R163 = (R143 - R150);
        R164 = (R144 + R149);
        R165 = (R121 + R139);
        R166 = (R122 - R140);
        R167 = (R121 - R139);
        R168 = (R122 + R140);
        P2[(a4187 + 64)] = (R161 + R165);
        P2[(a4187 + 65)] = (R162 + R166);
        P2[(a4187 + 320)] = (R161 - R165);
        P2[(a4187 + 321)] = (R162 - R166);
        P2[(a4187 + 192)] = (R163 + R168);
        P2[(a4187 + 193)] = (R164 - R167);
        P2[(a4187 + 448)] = (R163 - R168);
        P2[(a4187 + 449)] = (R164 + R167);
    }
    __syncthreads();
}
#endif

__global__ void ker_fftx_mddft_256x256x256_HIP2(double  *Y) {
    double R169, R170, R171, R172, R173, R174, R175, R176, 
            R177, R178, R179, R180, R181, R182, R183, R184, 
            R185, R186, R187, R188, R189, R190, R191, R192, 
            R193, R194, R195, R196, R197, R198, R199, R200, 
            R201, R202, R203, R204, R205, R206, R207, R208, 
            R209, R210, R211, R212, R213, R214, R215, R216, 
            R217, R218, R219, R220, R221, R222, R223, R224, 
            R225, R226, R227, R228, R229, R230, R231, R232, 
            R233, R234, R235, R236, R237, R238, R239, R240, 
            R241, R242, R243, R244, R245, R246, R247, R248, 
            R249, R250, R251, R252;
    __shared__ double T61[8192];
//    __shared__ double T61[8192] = {0};
    int a4943, a4944, a4945, a4946, a4947, a4948;
//	for ( a4943 = 0; a4943 < 8192; a4943++ ) T61[a4943] = 0.0;
#if 0
    a4943 = (threadIdx.x % 16);
    a4944 = (a4943 % 2);
    a4945 = (a4943 / 2);
    a4946 = (threadIdx.x / 16);
#endif
    a4947 = ((1024*blockIdx.x) + (32*blockIdx.y) + (16384*blockIdx.z) + (4194304*a4944) + (131072*a4945) + (2*a4946));
#if 0
    R169 = P2[a4947];
    R170 = P2[(a4947 + 1)];
    R171 = P2[(a4947 + 16777216)];
    R172 = P2[(a4947 + 16777217)];
    R201 = (R169 + R171);
    R202 = (R170 + R172);
    R203 = (R169 - R171);
    R204 = (R170 - R172);
    R173 = P2[(a4947 + 8388608)];
    R174 = P2[(a4947 + 8388609)];
    R175 = P2[(a4947 + 25165824)];
    R176 = P2[(a4947 + 25165825)];
    R205 = (R173 + R175);
    R206 = (R174 + R176);
    R207 = (R173 - R175);
    R208 = (R174 - R176);
    a4948 = ((512*a4946) + (64*a4945) + (32*a4944));
    T61[a4948] = (R201 + R205);
    T61[(a4948 + 1)] = (R202 + R206);
    T61[(a4948 + 4)] = (R201 - R205);
    T61[(a4948 + 5)] = (R202 - R206);
    T61[(a4948 + 2)] = (R203 + R208);
    T61[(a4948 + 3)] = (R204 - R207);
    T61[(a4948 + 6)] = (R203 - R208);
    T61[(a4948 + 7)] = (R204 + R207);
    R177 = P2[(a4947 + 1048576)];
    R178 = P2[(a4947 + 1048577)];
    R179 = P2[(a4947 + 17825792)];
    R180 = P2[(a4947 + 17825793)];
    R209 = (R177 + R179);
    R210 = (R178 + R180);
    R211 = (R177 - R179);
    R212 = (R178 - R180);
    R181 = P2[(a4947 + 9437184)];
    R182 = P2[(a4947 + 9437185)];
    R183 = P2[(a4947 + 26214400)];
    R184 = P2[(a4947 + 26214401)];
    R213 = (R181 + R183);
    R214 = (R182 + R184);
    R215 = (R181 - R183);
    R216 = (R182 - R184);
    T61[(a4948 + 8)] = (R209 + R213);
    T61[(a4948 + 9)] = (R210 + R214);
    T61[(a4948 + 12)] = (R209 - R213);
    T61[(a4948 + 13)] = (R210 - R214);
    T61[(a4948 + 10)] = (R211 + R216);
    T61[(a4948 + 11)] = (R212 - R215);
    T61[(a4948 + 14)] = (R211 - R216);
    T61[(a4948 + 15)] = (R212 + R215);
    R185 = P2[(a4947 + 2097152)];
    R186 = P2[(a4947 + 2097153)];
    R187 = P2[(a4947 + 18874368)];
    R188 = P2[(a4947 + 18874369)];
    R217 = (R185 + R187);
    R218 = (R186 + R188);
    R219 = (R185 - R187);
    R220 = (R186 - R188);
    R189 = P2[(a4947 + 10485760)];
    R190 = P2[(a4947 + 10485761)];
    R191 = P2[(a4947 + 27262976)];
    R192 = P2[(a4947 + 27262977)];
    R221 = (R189 + R191);
    R222 = (R190 + R192);
    R223 = (R189 - R191);
    R224 = (R190 - R192);
    T61[(a4948 + 16)] = (R217 + R221);
    T61[(a4948 + 17)] = (R218 + R222);
    T61[(a4948 + 20)] = (R217 - R221);
    T61[(a4948 + 21)] = (R218 - R222);
    T61[(a4948 + 18)] = (R219 + R224);
    T61[(a4948 + 19)] = (R220 - R223);
    T61[(a4948 + 22)] = (R219 - R224);
    T61[(a4948 + 23)] = (R220 + R223);
    R193 = P2[(a4947 + 3145728)];
    R194 = P2[(a4947 + 3145729)];
    R195 = P2[(a4947 + 19922944)];
    R196 = P2[(a4947 + 19922945)];
    R225 = (R193 + R195);
    R226 = (R194 + R196);
    R227 = (R193 - R195);
    R228 = (R194 - R196);
    R197 = P2[(a4947 + 11534336)];
    R198 = P2[(a4947 + 11534337)];
    R199 = P2[(a4947 + 28311552)];
    R200 = P2[(a4947 + 28311553)];
    R229 = (R197 + R199);
    R230 = (R198 + R200);
    R231 = (R197 - R199);
    R232 = (R198 - R200);
    T61[(a4948 + 24)] = (R225 + R229);
    T61[(a4948 + 25)] = (R226 + R230);
    T61[(a4948 + 28)] = (R225 - R229);
    T61[(a4948 + 29)] = (R226 - R230);
    T61[(a4948 + 26)] = (R227 + R232);
    T61[(a4948 + 27)] = (R228 - R231);
    T61[(a4948 + 30)] = (R227 - R232);
    T61[(a4948 + 31)] = (R228 + R231);
    __syncthreads();
    for(int i66 = 0; i66 <= 1; i66++) {
        int a5635, a5636, a5637, a5638, a5639, a5640, a5641, a5642, 
                a5647, a5648, a5649, a5650, a5657, a5658, a5659, a5660, 
                a5665, a5666, a5667, a5668, b1365;
        a5635 = (threadIdx.x % 16);
        a5636 = (a5635 % 2);
        a5637 = ((512*(threadIdx.x / 16)) + (64*(a5635 / 2)) + (2*a5636) + (4*i66));
        R189 = T61[a5637];
        a5638 = (a5637 + 1);
        R190 = T61[a5638];
        a5639 = (a5637 + 32);
        R191 = T61[a5639];
        a5640 = (a5637 + 33);
        R192 = T61[a5640];
        a5641 = (16*i66);
        a5642 = (32*a5636);
        R169 = D4[(a5641 + a5642)];
        b1365 = (a5642 + a5641);
        R170 = D4[(b1365 + 1)];
        R193 = ((R169*R189) - (R170*R190));
        R194 = ((R170*R189) + (R169*R190));
        R171 = D4[(b1365 + 2)];
        R172 = D4[(b1365 + 3)];
        R195 = ((R171*R191) - (R172*R192));
        R196 = ((R172*R191) + (R171*R192));
        R225 = (R193 + R195);
        R226 = (R194 + R196);
        R227 = (R193 - R195);
        R228 = (R194 - R196);
        a5647 = (a5637 + 8);
        R197 = T61[a5647];
        a5648 = (a5637 + 9);
        R198 = T61[a5648];
        a5649 = (a5637 + 40);
        R199 = T61[a5649];
        a5650 = (a5637 + 41);
        R200 = T61[a5650];
        R173 = D4[(b1365 + 4)];
        R174 = D4[(b1365 + 5)];
        R201 = ((R173*R197) - (R174*R198));
        R202 = ((R174*R197) + (R173*R198));
        R175 = D4[(b1365 + 6)];
        R176 = D4[(b1365 + 7)];
        R203 = ((R175*R199) - (R176*R200));
        R204 = ((R176*R199) + (R175*R200));
        R229 = (R201 + R203);
        R230 = (R202 + R204);
        R177 = (0.70710678118654757*(R201 - R203));
        R178 = (0.70710678118654757*(R202 - R204));
        R205 = (R177 + R178);
        R206 = (R178 - R177);
        a5657 = (a5637 + 16);
        R207 = T61[a5657];
        a5658 = (a5637 + 17);
        R208 = T61[a5658];
        a5659 = (a5637 + 48);
        R209 = T61[a5659];
        a5660 = (a5637 + 49);
        R210 = T61[a5660];
        R179 = D4[(b1365 + 8)];
        R180 = D4[(b1365 + 9)];
        R211 = ((R179*R207) - (R180*R208));
        R212 = ((R180*R207) + (R179*R208));
        R181 = D4[(b1365 + 10)];
        R182 = D4[(b1365 + 11)];
        R213 = ((R181*R209) - (R182*R210));
        R214 = ((R182*R209) + (R181*R210));
        R231 = (R211 + R213);
        R232 = (R212 + R214);
        R233 = (R211 - R213);
        R234 = (R212 - R214);
        a5665 = (a5637 + 24);
        R215 = T61[a5665];
        a5666 = (a5637 + 25);
        R216 = T61[a5666];
        a5667 = (a5637 + 56);
        R217 = T61[a5667];
        a5668 = (a5637 + 57);
        R218 = T61[a5668];
        R183 = D4[(b1365 + 12)];
        R184 = D4[(b1365 + 13)];
        R219 = ((R183*R215) - (R184*R216));
        R220 = ((R184*R215) + (R183*R216));
        R185 = D4[(b1365 + 14)];
        R186 = D4[(b1365 + 15)];
        R221 = ((R185*R217) - (R186*R218));
        R222 = ((R186*R217) + (R185*R218));
        R235 = (R219 + R221);
        R236 = (R220 + R222);
        R187 = (0.70710678118654757*(R220 - R222));
        R188 = (0.70710678118654757*(R219 - R221));
        R223 = (R187 - R188);
        R224 = (R188 + R187);
        R237 = (R225 + R231);
        R238 = (R226 + R232);
        R239 = (R225 - R231);
        R240 = (R226 - R232);
        R241 = (R229 + R235);
        R242 = (R230 + R236);
        R243 = (R229 - R235);
        R244 = (R230 - R236);
        T61[a5637] = (R237 + R241);
        T61[a5638] = (R238 + R242);
        T61[a5639] = (R237 - R241);
        T61[a5640] = (R238 - R242);
        T61[a5657] = (R239 + R244);
        T61[a5658] = (R240 - R243);
        T61[a5659] = (R239 - R244);
        T61[a5660] = (R240 + R243);
        R245 = (R227 + R234);
        R246 = (R228 - R233);
        R247 = (R227 - R234);
        R248 = (R228 + R233);
        R249 = (R205 + R223);
        R250 = (R206 - R224);
        R251 = (R205 - R223);
        R252 = (R206 + R224);
        T61[a5647] = (R245 + R249);
        T61[a5648] = (R246 + R250);
        T61[a5649] = (R245 - R249);
        T61[a5650] = (R246 - R250);
        T61[a5665] = (R247 + R252);
        T61[a5666] = (R248 - R251);
        T61[a5667] = (R247 - R252);
        T61[a5668] = (R248 + R251);
    }
    __syncthreads();
#endif
    for(int i20 = 0; i20 <= 1; i20++) {
        int a6253, a6254, a6255, a6256, a6257, a6258, a6259, a6280, 
                b1513;
        a6253 = (32*i20);
        a6254 = (512*(threadIdx.x / 16));
        a6255 = (threadIdx.x % 16);
        a6256 = (2*a6255);
        a6257 = (a6254 + a6256 + a6253);
        R189 = T61[a6257];
        R190 = T61[(a6257 + 1)];
        R191 = T61[(a6257 + 256)];
        R192 = T61[(a6257 + 257)];
        a6258 = (16*i20);
        a6259 = (32*a6255);
        R169 = D3[(a6258 + a6259)];
        b1513 = (a6259 + a6258);
        R170 = D3[(b1513 + 1)];
        R193 = ((R169*R189) - (R170*R190));
        R194 = ((R170*R189) + (R169*R190));
        R171 = D3[(b1513 + 2)];
        R172 = D3[(b1513 + 3)];
        R195 = ((R171*R191) - (R172*R192));
        R196 = ((R172*R191) + (R171*R192));
        R225 = (R193 + R195);
        R226 = (R194 + R196);
        R227 = (R193 - R195);
        R228 = (R194 - R196);
        R197 = T61[(a6257 + 64)];
        R198 = T61[(a6257 + 65)];
        R199 = T61[(a6257 + 320)];
        R200 = T61[(a6257 + 321)];
        R173 = D3[(b1513 + 4)];
        R174 = D3[(b1513 + 5)];
        R201 = ((R173*R197) - (R174*R198));
        R202 = ((R174*R197) + (R173*R198));
        R175 = D3[(b1513 + 6)];
        R176 = D3[(b1513 + 7)];
        R203 = ((R175*R199) - (R176*R200));
        R204 = ((R176*R199) + (R175*R200));
        R229 = (R201 + R203);
        R230 = (R202 + R204);
        R177 = (0.70710678118654757*(R201 - R203));
        R178 = (0.70710678118654757*(R202 - R204));
        R205 = (R177 + R178);
        R206 = (R178 - R177);
        R207 = T61[(a6257 + 128)];
        R208 = T61[(a6257 + 129)];
        R209 = T61[(a6257 + 384)];
        R210 = T61[(a6257 + 385)];
        R179 = D3[(b1513 + 8)];
        R180 = D3[(b1513 + 9)];
        R211 = ((R179*R207) - (R180*R208));
        R212 = ((R180*R207) + (R179*R208));
        R181 = D3[(b1513 + 10)];
        R182 = D3[(b1513 + 11)];
        R213 = ((R181*R209) - (R182*R210));
        R214 = ((R182*R209) + (R181*R210));
        R231 = (R211 + R213);
        R232 = (R212 + R214);
        R233 = (R211 - R213);
        R234 = (R212 - R214);
        R215 = T61[(a6257 + 192)];
        R216 = T61[(a6257 + 193)];
        R217 = T61[(a6257 + 448)];
        R218 = T61[(a6257 + 449)];
        R183 = D3[(b1513 + 12)];
        R184 = D3[(b1513 + 13)];
        R219 = ((R183*R215) - (R184*R216));
        R220 = ((R184*R215) + (R183*R216));
        R185 = D3[(b1513 + 14)];
        R186 = D3[(b1513 + 15)];
        R221 = ((R185*R217) - (R186*R218));
        R222 = ((R186*R217) + (R185*R218));
        R235 = (R219 + R221);
        R236 = (R220 + R222);
        R187 = (0.70710678118654757*(R220 - R222));
        R188 = (0.70710678118654757*(R219 - R221));
        R223 = (R187 - R188);
        R224 = (R188 + R187);
        R237 = (R225 + R231);
        R238 = (R226 + R232);
        R239 = (R225 - R231);
        R240 = (R226 - R232);
        R241 = (R229 + R235);
        R242 = (R230 + R236);
        R243 = (R229 - R235);
        R244 = (R230 - R236);
        a6280 = ((262144*blockIdx.x) + (8192*blockIdx.y) + (4194304*blockIdx.z) + a6254 + a6256 + a6253);
        Y[a6280] = (R237 + R241);
        Y[(a6280 + 1)] = (R238 + R242);
        Y[(a6280 + 256)] = (R237 - R241);
        Y[(a6280 + 257)] = (R238 - R242);
        Y[(a6280 + 128)] = (R239 + R244);
        Y[(a6280 + 129)] = (R240 - R243);
        Y[(a6280 + 384)] = (R239 - R244);
        Y[(a6280 + 385)] = (R240 + R243);
        R245 = (R227 + R234);
        R246 = (R228 - R233);
        R247 = (R227 - R234);
        R248 = (R228 + R233);
        R249 = (R205 + R223);
        R250 = (R206 - R224);
        R251 = (R205 - R223);
        R252 = (R206 + R224);
        Y[(a6280 + 64)] = (R245 + R249);
        Y[(a6280 + 65)] = (R246 + R250);
        Y[(a6280 + 320)] = (R245 - R249);
        Y[(a6280 + 321)] = (R246 - R250);
        Y[(a6280 + 192)] = (R247 + R252);
        Y[(a6280 + 193)] = (R248 - R251);
        Y[(a6280 + 448)] = (R247 - R252);
        Y[(a6280 + 449)] = (R248 + R251);
    }
    __syncthreads();
}

extern "C" {
void fftx_mddft_256x256x256_HIP(double  *Y, double  *X, double  *sym) {
    dim3 b1514(256, 1, 1), b1515(256, 1, 1), b1516(256, 1, 1), g1(16, 32, 8), g2(16, 32, 8), g3(16, 32, 8);
//    hipLaunchKernelGGL(ker_fftx_mddft_256x256x256_HIP0, dim3(g1), dim3(b1514), 0, 0, X);
//    hipLaunchKernelGGL(ker_fftx_mddft_256x256x256_HIP1, dim3(g2), dim3(b1515), 0, 0);
    hipLaunchKernelGGL(ker_fftx_mddft_256x256x256_HIP2, dim3(g3), dim3(b1516), 0, 0, Y);
}
}

extern "C" {
void destroy_fftx_mddft_256x256x256_HIP() {
    double  *hp1;
    hipMemcpyFromSymbol(&(hp1), HIP_SYMBOL(P1), sizeof(double  *));
    hipFree(hp1);
    hipMemcpyFromSymbol(&(hp1), HIP_SYMBOL(P2), sizeof(double  *));
    hipFree(hp1);
}
}

extern "C" {
void init_fftx_mddft_256x256x256_HIP() {
    double  *hp1;
//    hipFuncSetCacheConfig(reinterpret_cast<const void*>(ker_fftx_mddft_256x256x256_HIP0), hipFuncCachePreferL1);
//    hipFuncSetCacheConfig(reinterpret_cast<const void*>(ker_fftx_mddft_256x256x256_HIP1), hipFuncCachePreferL1);
    hipFuncSetCacheConfig(reinterpret_cast<const void*>(ker_fftx_mddft_256x256x256_HIP2), hipFuncCachePreferL1);
    hipMalloc(((void  * *) &(hp1)), (sizeof(double )*33554432));
    hipMemcpyToSymbol(HIP_SYMBOL(P1), &(hp1), sizeof(double  *));
    hipMalloc(((void  * *) &(hp1)), (sizeof(double )*33554432));
    hipMemcpyToSymbol(HIP_SYMBOL(P2), &(hp1), sizeof(double  *));
}
}
