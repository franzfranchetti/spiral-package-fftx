// simplified Sigma-SPL
SIMTISum(i1, 4096,
  SIMTISum(i145, 256,
          Scat(fTensor(fBase(i1), fBase(16, idiv(i145, V(16))), fId(16), fBase(16, imod(i145, V(16))), fId(2))) *


// split loops back
SIMTISumBlock(i1, 4096,
   SIMTISumThreads(i2, 16,
      SIMTISumThreads(i3, 16,
          Scat(fTensor(fBase(i1), fBase(16, i2), fId(16), fBase(16, i3), fId(2))) *


// kernel, store region
hipLaunchKernelGGL(ker_code2, dim3(4096, 1, 1), dim3(256, 1, 1), 0, 0, Y);

__global__ void ker_code2(double  *Y) {
  
    base = 
      8192 * blockIdx.x
     + 512 * (threadIdx.x / 16) 
     +   2 * (threadIdx.x % 16);

    Y[base] = 
    Y[(base + 1)] = 
    Y[(base + 256)] = 
    Y[(base + 257)] = 
    Y[(base + 128)] = 
    Y[(base + 129)] = 
    Y[(base + 384)] = 
    Y[(base + 385)] = 
    Y[(base + 32)] = 
    Y[(base + 33)] = 
    Y[(base + 288)] = 
    Y[(base + 289)] = 
    Y[(base + 160)] = 
    Y[(base + 161)] = 
    Y[(base + 416)] = 
    Y[(base + 417)] = 
    Y[(base + 64)] = 
    Y[(base + 65)] = 
    Y[(base + 320)] = 
    Y[(base + 321)] = 
    Y[(base + 192)] = 
    Y[(base + 193)] = 
    Y[(base + 448)] = 
    Y[(base + 449)] = 
    Y[(base + 96)] = 
    Y[(base + 97)] = 
    Y[(base + 352)] = 
    Y[(base + 353)] = 
    Y[(base + 224)] = 
    Y[(base + 225)] = 
    Y[(base + 480)] = 
    Y[(base + 481)] = 
    __syncthreads();
}
